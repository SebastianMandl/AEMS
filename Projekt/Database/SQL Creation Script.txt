-- run this setup script as the database administrator
-- this script is required to be run within an existing database named "AEMSData"

DROP OWNED BY aems CASCADE; -- everything which has been owned by the user "aems" will be dropped by issuing this command
DROP USER IF EXISTS aems;
CREATE USER aems WITH ENCRYPTED PASSWORD 'aems' VALID UNTIL '2018-01-01' ; -- creates the user with a predifined password. This password is required to be changed for security reasons!

GRANT CONNECT ON DATABASE "AEMSData" TO aems; -- grants the user to connect to the database

DROP SCHEMA IF EXISTS aems; -- in case if the schema already existed (e.g. this script has run before) drop it
CREATE SCHEMA aems AUTHORIZATION aems; -- create the schema "aems" and authorizes it to the user "aems". (clear text: the schema "aems" belongs to the user "aems")

-- setting up the table with their belonging constraints
DROP TABLE IF EXISTS aems."MeterTypes" CASCADE;
CREATE TABLE aems."MeterTypes"
(
  id numeric(10,0) NOT NULL,
  displayname character varying(100) NOT NULL,
  CONSTRAINT pk_metertypes PRIMARY KEY (id)
)

DROP TABLE IF EXISTS aems."Users" CASCADE;
CREATE TABLE aems."Users"
(
  id numeric(10,0) NOT NULL,
  username character varying(32) NOT NULL,
  "password" bytea NOT NULL,
  CONSTRAINT pk_users PRIMARY KEY (id),
  CONSTRAINT users_username_key UNIQUE (username)
)

DROP TABLE IF EXISTS aems."Meters" CASCADE;
CREATE TABLE aems."Meters"
(
  id character varying(150) NOT NULL,
  metertype numeric(10,0),
  "user" numeric(10,0),
  city character varying(50),
  latitude numeric(10,10),
  longitude numeric(10,10),
  CONSTRAINT pk_meters PRIMARY KEY (id),
  CONSTRAINT fk_meters_metertypes FOREIGN KEY (metertype)
      REFERENCES aems."MeterTypes" (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_meters_users FOREIGN KEY ("user")
      REFERENCES aems."Users" (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)

DROP TABLE IF EXISTS aems."MeterData" CASCADE;
CREATE TABLE aems."MeterData"
(
  id numeric(10,0) NOT NULL,
  meter character varying(150),
  "timestamp" timestamp without time zone NOT NULL,
  measured_value numeric(7,5) NOT NULL,
  CONSTRAINT pk_meterdata PRIMARY KEY (id),
  CONSTRAINT fk_meterdata_meters FOREIGN KEY (meter)
      REFERENCES aems."Meters" (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)

DROP TABLE IF EXISTS aems."WeatherData" CASCADE;
CREATE TABLE aems."WeatherData"
(
  id numeric(10,0) NOT NULL,
  meter character varying(150) NOT NULL,
  "timestamp" timestamp without time zone,
  temperature numeric(2,2),
  humidity numeric(3,2),
  CONSTRAINT pk_weatherdata PRIMARY KEY (id),
  CONSTRAINT fk_weatherdata_meters FOREIGN KEY (meter)
      REFERENCES aems."Meters" (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)

DROP TABLE IF EXISTS aems."TransferInfos" CASCADE;
CREATE TABLE aems."TransferInfos"
(
  id numeric(10,0) NOT NULL,
  secret_number numeric(3,0) NOT NULL,
  mod_number numeric(100,0) NOT NULL,
  "key" character varying(48),
  CONSTRAINT pk_transfer_infos PRIMARY KEY (id)
)

-- setting up all the functions

/**
 * this function deletes a user.
**/
DROP FUNCTION aems.delete_user(varchar);
CREATE OR REPLACE FUNCTION aems.delete_user(p_username character varying) RETURNS boolean AS $$
declare

	row_count_before integer;
	row_count_after integer;

begin
	
	select count(*) into row_count_before
	from aems."Users";

	delete from aems."Users"
	where username = p_username;

	select count(*) into row_count_after
	from aems."Users";

	if row_count_before > row_count_after then
		return true;
	else
		return false;
	end if;
end;
$$ LANGUAGE plpgsql;

/**
  * This function returns an encrypted json.
  * It comprises information about all users including their usernames and passwords.
  * this functions requires a tranfer-key to be priorly exchanged!
**/
DROP FUNCTION aems.get_user_infos();
CREATE OR REPLACE FUNCTION aems.get_user_infos() RETURNS bytea AS $$
declare
	decrypted_password_bytes bytea;
	aes_key varchar(48);
	aes_key_bytes bytea;
	user_password_bytes bytea;
	decrypted_password varchar(32);

	datafile text default 'key.txt';

	user_record record;
	json varchar(500000) default '';
begin
	aes_key := pg_read_file(datafile, 0, 16);
	aes_key_bytes := convert_to(aes_key, 'UTF-8');

	json := '[ ';
	for user_record in (select username, "password"
			    from aems."Users") loop
		decrypted_password_bytes := decrypt(user_record."password", aes_key_bytes, 'aes');
		decrypted_password := convert_from(decrypted_password_bytes, 'UTF-8');

		json := json || '{ username:"' || user_record."username" || '", password:"' || decrypted_password || '" }, ';
	end loop;
	select substr(json, 0, char_length(json) - 1) into json;
	json := json || ' ]';


	select convert_to("key", 'UTF-8') into aes_key_bytes
	from aems."TransferInfos"
	where id = 0;

	--return json;
	return encrypt(convert_to(aems.pad_str_for_aes(json), 'UTF-8'), aes_key_bytes, 'aes');
end;
$$ LANGUAGE plpgsql;

/**
  * this function registers a new user meaning it creates a record for the user.
  * the password will be encrypted by the aes standard. the key is deposited outside of the database
**/
DROP FUNCTION aems.register_user(varchar, varchar);
CREATE OR REPLACE FUNCTION aems.register_user(username character varying, clear_text_password character varying) RETURNS boolean AS $$
declare
	pass_bytes bytea;
	decrypted_text varchar(4096);
	encrypted_pass_bytes bytea;
	aes_key varchar(48);
	aes_key_bytes bytea;

	datafile text default 'key.txt';

	row_count_before integer;
	row_count_after integer;
begin
	-- aquire the key from the key file ; preliminarily located within the data directory at serverside
	-- key file must be relocated in the future!!!
	aes_key := pg_read_file(datafile, 0, 48);

	pass_bytes := convert_to(clear_text_password, 'UTF-8');
	aes_key_bytes := convert_to(aes_key, 'UTF-8');
	encrypted_pass_bytes := encrypt(pass_bytes, aes_key_bytes, 'aes');

	select count(*) into row_count_before
	from aems."Users";

	insert into aems."Users" (id, username, "password")
	values (nextval('aems.user_seq'), username, encrypted_pass_bytes);

	select count(*) into row_count_after
	from aems."Users";

	if row_count_before < row_count_after then
		return true;
	else
		return false;
	end if;

exception
	when others then
		return false;	
end;
$$ LANGUAGE plpgsql;

/**
  * This function initiates the diffie-hellman-procedure
  * calling this function will prepare the next transfer-key generation
**/
CREATE OR REPLACE FUNCTION aems.get_transfer_infos()
  RETURNS character varying AS
$BODY$
declare

	json varchar(200);
	secret_number decimal(3, 0);
	mod_number decimal(100, 0);
	base_number decimal(2, 0);
	combination decimal(30, 0);

begin

	json := '{ ';

	-- generate base factor

	select random() * 9 + 11 into base_number;
	json := json || 'base:' || base_number;

	-- generate modulus

	select random() * (random() * 81657531897453431354687831513154354546878645513213245) into mod_number;
	json := json || ', mod:' || mod_number;

	-- generate secret number

	select random() * 9 + 4 into secret_number;
	select aems.compute(base_number, mod_number, secret_number) into combination;
	--select pow(base_number, secret_number) into combination;

	json := json || ', combination:' || combination || ' }';


	delete from aems."TransferInfos"; -- erase priorly specified data
	insert into aems."TransferInfos" (id, secret_number, mod_number) -- store the secret and modulus number into "TransferInfos"
	values (0, secret_number, mod_number);

	-- return info
	return json;
end;
$$ LANGUAGE plpgsql;

/**
  * This function concludes the diffie-hellman-procedure commenced by aems.get_transfer_infos()
  * This function computes the key and temporarily stores it into a table.
**/
CREATE OR REPLACE FUNCTION aems.verify_transfer_infos(combination numeric) RETURNS void AS $$
declare

	akey decimal(400, 0);
	varchar_key varchar(500);

begin

	select aems.compute(combination, mod_number, secret_number) into akey
	from aems."TransferInfos"
	where id = 0;

	SELECT CAST(akey AS varchar(500)) into varchar_key;	
	select substr(varchar_key, 1, 48) into varchar_key;
	

	update aems."TransferInfos" -- store the key into "TransferInfos"
	set "key" = varchar_key
	where id = 0;
end;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION aems.pad_str_for_aes(str character varying) RETURNS character varying AS $$
declare

	aes_block_size int default 16;
	str_len bigint default 0;
	remainder decimal(100, 0);	

begin

	select length(str) into str_len;
	select mod(str_len, aes_block_size) into remainder;
   
	if remainder <> 0 then
		remainder := 16 - remainder;
		-- padding is required
		loop
			str := str || '~';
			remainder := remainder - 1;
			exit when remainder = 0;
		end loop;
	end if;

	return str;

end;
$$ LANGUAGE plpgsql;

-- setting up java functions and pljava extension for postgres

SET client_min_messages TO NOTICE; -- or anything finer (INFO, DEBUG, ...) specify output stream
SET pljava.libjvm_location TO 'P:\Java\jdk1.8.0_102\jre\bin\server\jvm.dll'; -- specify the location of the jvm lib

ALTER DATABASE "AEMSData" SET client_min_messages FROM CURRENT;
ALTER DATABASE "AEMSData" SET pljava.libjvm_location FROM CURRENT; -- making changes persisent

CREATE EXTENSION pljava FROM unpackaged

SELECT sqlj.install_jar('file:///C:\Users\Sebastian\Desktop\Util.jar', 'Util', true); -- load up util lib
SELECT sqlj.set_classpath('aems', 'Util'); -- required to be specified otherwise the database associates the function with the false schema!!!

CREATE OR REPLACE FUNCTION aems.compute(decimal, decimal, decimal) RETURNS decimal AS 'at.htlgkr.aems.util.key.DiffieHellmanProcedure.compute'
  LANGUAGE java;

-- setting up sequences

CREATE SEQUENCE aems.user_seq
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 15
  CACHE 5;

-- finishing permission setup


-- the following sets up the select permission on all the various tables within the schema "aems"
GRANT SELECT ON TABLE aems."Users" TO aems;
GRANT SELECT ON TABLE aems."Meters" TO aems;
GRANT SELECT ON TABLE aems."MeterData" TO aems;
GRANT SELECT ON TABLE aems."MeterTypes" TO aems;
GRANT SELECT ON TABLE aems."WeatherData" TO aems;
GRANT SELECT ON TABLE aems."TransferInfos" TO aems;

GRANT INSERT ON TABLE aems."Users" TO aems;
GRANT INSERT ON TABLE aems."Meters" TO aems;
GRANT INSERT ON TABLE aems."MeterData" TO aems;
GRANT INSERT ON TABLE aems."MeterTypes" TO aems;
GRANT INSERT ON TABLE aems."WeatherData" TO aems;
GRANT INSERT ON TABLE aems."TransferInfos" TO aems;

GRANT UPDATE ON TABLE aems."Users" TO aems;
GRANT UPDATE ON TABLE aems."Meters" TO aems;
GRANT UPDATE ON TABLE aems."MeterData" TO aems;
GRANT UPDATE ON TABLE aems."MeterTypes" TO aems;
GRANT UPDATE ON TABLE aems."WeatherData" TO aems;
GRANT UPDATE ON TABLE aems."TransferInfos" TO aems;

GRANT DELETE ON TABLE aems."Users" TO aems;
GRANT DELETE ON TABLE aems."Meters" TO aems;
GRANT DELETE ON TABLE aems."MeterData" TO aems;
GRANT DELETE ON TABLE aems."MeterTypes" TO aems;
GRANT DELETE ON TABLE aems."WeatherData" TO aems;
GRANT DELETE ON TABLE aems."TransferInfos" TO aems;

-- grant the user "aems" to execute the required functions for proper operation
GRANT EXECUTE ON FUNCTION aems.delete_user(varchar) TO aems;
GRANT EXECUTE ON FUNCTION aems.get_user_infos() TO aems;
GRANT EXECUTE ON FUNCTION aems.register_user(varchar, varchar) TO aems;
GRANT EXECUTE ON FUNCTION aems.get_transfer_infos() TO aems;
GRANT EXECUTE ON FUNCTION aems.verify_transfer_infos(numeric) TO aems;

-- revoking all the privileges from others that do not need accessibility
-- REVOKE ALL PRIVILEGES ON DATABASE "AEMSData" FROM public;
REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA aems FROM postgres;
REVOKE ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA aems FROM postgres;
REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA aems FROM postgres;


ALTER TABLE aems."Users" OWNER TO aems;
ALTER TABLE aems."MeterData" OWNER TO aems;
ALTER TABLE aems."Meters" OWNER TO aems;
ALTER TABLE aems."MeterTypes" OWNER TO aems;
ALTER TABLE aems."WeatherData" OWNER TO aems;
ALTER TABLE aems."TransferInfos" OWNER TO aems;

ALTER FUNCTION aems.get_user_infos() OWNER TO aems;
ALTER FUNCTION aems.register_user(varchar, varchar) OWNER TO aems;
ALTER FUNCTION aems.delete_user(varchar) OWNER TO aems;
ALTER FUNCTION aems.verify_transfer_infos(numeric) OWNER TO aems;
ALTER FUNCTION aems.get_transfer_infos() OWNER TO aems;

ALTER SEQUENCE aems.user_seq OWNER TO aems;
