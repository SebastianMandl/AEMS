--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.12
-- Dumped by pg_dump version 9.5.5

-- Started on 2018-03-08 06:54:24

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 10 (class 2615 OID 16386)
-- Name: aems; Type: SCHEMA; Schema: -; Owner: aems
--

CREATE SCHEMA aems;


ALTER SCHEMA aems OWNER TO aems;

--
-- TOC entry 11 (class 2615 OID 19152)
-- Name: sqlj; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA sqlj;


ALTER SCHEMA sqlj OWNER TO postgres;

--
-- TOC entry 3 (class 3079 OID 19153)
-- Name: pljava; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pljava WITH SCHEMA sqlj;


--
-- TOC entry 2464 (class 0 OID 0)
-- Dependencies: 3
-- Name: EXTENSION pljava; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pljava IS 'PL/Java procedural language (https://tada.github.io/pljava/)';


--
-- TOC entry 1 (class 3079 OID 12355)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 2465 (class 0 OID 0)
-- Dependencies: 1
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 2 (class 3079 OID 16387)
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- TOC entry 2466 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


SET search_path = aems, pg_catalog;

--
-- TOC entry 283 (class 1255 OID 16424)
-- Name: archive_meter_notification(character varying, numeric, boolean, boolean, numeric, numeric, numeric); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION archive_meter_notification(param_meter character varying, param_notification numeric, param_positive_deviation boolean, param_negative_deviation boolean, param_positive_deviation_value numeric, param_negative_deviation_value numeric, param_period numeric) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare

	notification_record record;

begin

	for notification_record in (select *
				     from aems."ArchivedMeterNotifications"
				     where meter = param_meter and notification = param_notification and period = param_period) loop

		if notification_record.positive_deviation = param_positive_deviation and notification_record.negative_deviation = param_negative_deviation
			and notification_record.positive_deviation_value = param_positive_deviation_value and notification_record.negative_deviation_value = param_negative_deviation_value then

			-- entries are congruent
			-- merely update last occurrence field

			update aems."ArchivedMeterNotifications"
			set last_occurrence = now();

			return;
		end if;

	end loop;

	insert into aems."ArchivedMeterNotifications" (id, meter, notification, positive_deviation, negative_deviation, negative_deviation_value, positive_deviation_value, period, initial_occurrence)
	values (nextval('aems.amn_seq'), param_meter, param_notification, param_positive_deviation, param_negative_deviation, param_negative_deviation_value, param_positive_deviation_value, param_period, now());

exception
	when NO_DATA_FOUND then
		insert into aems."ArchivedMeterNotifications" (id, meter, notification, positive_deviation, negative_deviation, negative_deviation_value, positive_deviation_value, period, initial_occurrence)
		values (nextval('aems.amn_seq'), param_meter, param_notification, param_positive_deviation, param_negative_deviation, param_negative_deviation_value, param_positive_deviation_value, param_period, now());

end;


$$;


ALTER FUNCTION aems.archive_meter_notification(param_meter character varying, param_notification numeric, param_positive_deviation boolean, param_negative_deviation boolean, param_positive_deviation_value numeric, param_negative_deviation_value numeric, param_period numeric) OWNER TO aems;

--
-- TOC entry 284 (class 1255 OID 16425)
-- Name: check_for_deviation_of_measurements(); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION check_for_deviation_of_measurements() RETURNS void
    LANGUAGE plpgsql
    AS $$
declare

	min_measured_value aems."MeterData".measured_value%type;
	max_measured_value aems."MeterData".measured_value%type;
	avg_measured_value aems."MeterData".measured_value%type;
	min_negative_deviation aems."Notifications".min_negative_deviation%type;
	min_positive_deviation aems."Notifications".min_positive_deviation%type;

	negative_deviation_present boolean;
	positive_deviation_present boolean;

	deviation_period aems."Periods".id%type;
	
	meter_row record;
	notification_exception record;
	meter_data record;
	substraction_days decimal(3, 0);
begin

	for meter_row in (select meter as "id", notification
			  from aems."NotificationMeters") loop

		deviation_period := -1;
		negative_deviation_present := false;
		positive_deviation_present := false;

		select avg(measured_value), min(measured_value), max(measured_value) into avg_measured_value, min_measured_value, max_measured_value
		from aems."MeterData"
		where meter = meter_row.id;

		select n."min_negative_deviation", n."min_positive_deviation" into min_negative_deviation, min_positive_deviation
		from aems."Notifications" n
		where id = meter_row.notification;

		if min_measured_value < avg_measured_value - (avg_measured_value * (min_negative_deviation / 100.0)) then
			-- raise notice 'negative deviation detected: %', notification_exception.period;
			deviation_period := 0;
			negative_deviation_present := true;
		end if;

		if max_measured_value > avg_measured_value + (avg_measured_value * (min_positive_deviation / 100.0)) then
			-- raise notice 'positive deviation detected: %', notification_exception.period;
			deviation_period := 0;
			positive_deviation_present := true;
		end if;

		for notification_exception in (select a.period, a.min_positive_deviation, a.min_negative_deviation
						from aems."NotificationExceptions" a
						inner join aems."Notifications" b on (a.notification = b.id)
						where meter_row.notification = b.id
						order by a.period desc ) loop

			-- raise notice 'period: %', notification_exception.period;

			if notification_exception.period = 1 then -- daily
				substraction_days := 1;
			elsif notification_exception.period = 2 then -- weekly
				substraction_days := 7;
			elsif notification_exception.period = 3 then -- monthly
				substraction_days := 31;
			elsif notification_exception.period = 4 then -- yearly
				substraction_days := 365;
			end if;
		
			for meter_data in (select avg(measured_value) as avg, min(measured_value) as min, max(measured_value) as max
					   from aems."MeterData"
					   where meter = meter_row.id and "timestamp" between (now()::timestamp - (substraction_days || ' days')::interval) and now()::timestamp) loop

				-- raise notice '%', meter_data;

				negative_deviation_present := meter_data.min < meter_data.avg - (meter_data.avg * (notification_exception.min_negative_deviation / 100.0));
				positive_deviation_present := meter_data.max > meter_data.avg + (meter_data.avg * (notification_exception.min_positive_deviation / 100.0));

				if negative_deviation_present or positive_deviation_present then
					
				end if;

				if negative_deviation_present then
					-- raise notice 'negative deviation detected: %', notification_exception.period;
					deviation_period := notification_exception.period;
					min_measured_value := meter_data.min;
				end if;

				if positive_deviation_present then
					-- raise notice 'positive deviation detected: %', notification_exception.period;
					deviation_period := notification_exception.period;
					max_measured_value := meter_data.max;
				end if;
				
			end loop;

		end loop;

		-- raise notice 'deviation min: % max: % period: %', min_measured_value, max_measured_value, deviation_period;
		perform aems."archive_meter_notification"(meter_row.id, meter_row.notification, positive_deviation_present, negative_deviation_present, min_measured_value, max_measured_value, deviation_period);			

	end loop;

end;

$$;


ALTER FUNCTION aems.check_for_deviation_of_measurements() OWNER TO aems;

--
-- TOC entry 300 (class 1255 OID 19241)
-- Name: compute(numeric, numeric, numeric); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION compute(numeric, numeric, numeric) RETURNS numeric
    LANGUAGE java
    AS $$at.htlgkr.aems.util.key.DiffieHellmanProcedure.compute$$;


ALTER FUNCTION aems.compute(numeric, numeric, numeric) OWNER TO aems;

--
-- TOC entry 285 (class 1255 OID 16426)
-- Name: delete_user(character varying); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION delete_user(p_username character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
declare

	row_count_before integer;
	row_count_after integer;

begin
	
	select count(*) into row_count_before
	from aems."Users";

	delete from aems."Users"
	where username = p_username;

	select count(*) into row_count_after
	from aems."Users";

	if row_count_before > row_count_after then
		return true;
	else
		return false;
	end if;
end;
$$;


ALTER FUNCTION aems.delete_user(p_username character varying) OWNER TO aems;

--
-- TOC entry 286 (class 1255 OID 16427)
-- Name: get_transfer_infos(); Type: FUNCTION; Schema: aems; Owner: postgres
--

CREATE FUNCTION get_transfer_infos() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare

	json varchar(200);
	secret_number decimal(3, 0);
	mod_number decimal(100, 0);
	base_number decimal(1000, 0);
	combination decimal(1000, 0);

begin

	json := '{ ';

	-- generate base factor

	select random() * 9 + 11 into base_number;
	json := json || 'base:' || base_number;

	-- generate modulus

	select random() * (random() * 81657531897453431354687831513154354546878645513213245) into mod_number;
	json := json || ', mod:' || mod_number;

	-- generate secret number

	select random() * 9 + 4 into secret_number;
	select aems.compute(base_number, mod_number, secret_number) into combination;

	json := json || ', combination:' || combination || ' }';


	delete from aems."TransferInfos"; -- erase priorly specified data
	insert into aems."TransferInfos" (id, secret_number, mod_number) -- store the secret and modulus number into "TransferInfos"
	values (0, secret_number, mod_number);

	-- return info
	return json;
end;

$$;


ALTER FUNCTION aems.get_transfer_infos() OWNER TO postgres;

--
-- TOC entry 282 (class 1255 OID 16428)
-- Name: get_user_infos(); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION get_user_infos() RETURNS bytea
    LANGUAGE plpgsql
    AS $$
declare
	decrypted_password_bytes bytea;
	aes_key varchar(48);
	aes_key_bytes bytea;
	user_password_bytes bytea;
	decrypted_password varchar(32);

	datafile text default 'key.txt';

	user_record record;
	user_meter_record record;
	json varchar(500000) default '';

	transferKey varchar(100);
	finalKeyNum numeric(100, 0) default 1;

	enteredLoop boolean default false;
begin

	aes_key := pg_read_file(datafile, 0, 16);
	aes_key_bytes := convert_to(aes_key, 'UTF-8');

	json := '[ ';
	for user_record in (select id, username, "password"
			    from aems."Users"
			    where  "username" <> 'master') loop
	        decrypted_password_bytes := aems.request_decryption(aes_key_bytes, user_record."password");
		decrypted_password := convert_from(decrypted_password_bytes, 'UTF-8');

		raise notice 'is: %' ,decrypted_password;

		json := json || '{ "id":' || user_record.id || ', "username":"' || user_record."username" || '", "password":"' || decrypted_password || '", "meters":[';

		for user_meter_record in (select m.id, mt.display_name as "metertype", city, latitude, longitude
					  from aems."Meters" m
					  inner join aems."MeterTypes" mt on (mt.id = m.metertype)
					  where "user" = user_record.id) loop

			enteredLoop := true;
			json := json || '{"id":"' || user_meter_record.id || '", "type":"' || user_meter_record.metertype || '", ';
			json := json || '"location": {"city":"' || user_meter_record.city || '", "lat":' || user_meter_record.latitude || ', "long":' || user_meter_record.longitude || '}},';
 
		end loop;
		if enteredLoop = true then
			select substr(json, 0, char_length(json)) into json; -- remove last comma
		end if;
		
		json := json || ']},';
	end loop;

	raise notice 'json: %' , json;
	
	select substr(json, 0, char_length(json)) into json;
	json := json || ' ]';

	-- convert_to("key", 'UTF-8')
	select "key" into transferKey
	from aems."TransferInfos"
	where id = 0;

	finalKeyNum := aems.salt(aems.hash_code(transferKey), 'master', aems.get_user_password('master'));

	--raise notice 'final key num: %', finalKeyNum;

	select substr(cast(finalKeyNum as varchar), 0, 17) into transferKey; -- key cannot exceed 16 digits
	select convert_to(transferKey, 'UTF-8') into aes_key_bytes;

	raise notice 'key: %', transferKey;

	delete from aems."DebugInfo";
	insert into aems."DebugInfo" (pk, "string") values (0, transferKey);

	return aems.request_encryption(aes_key_bytes, convert_to(json, 'UTF-8'));
end;
$$;


ALTER FUNCTION aems.get_user_infos() OWNER TO aems;

--
-- TOC entry 281 (class 1255 OID 16429)
-- Name: get_user_password(character varying); Type: FUNCTION; Schema: aems; Owner: postgres
--

CREATE FUNCTION get_user_password(param_username character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$
declare
	decrypted_password_bytes bytea;
	aes_key varchar(48);
	aes_key_bytes bytea;
	decrypted_password varchar(32);

	datafile text default 'key.txt';

	user_pwd bytea;
	stm varchar(100);
begin

	aes_key := pg_read_file(datafile, 0, 16);
	aes_key_bytes := convert_to(aes_key, 'UTF-8');

	execute 'select "password"
	        from aems."Users"
	        where username = $1' into user_pwd using param_username;

	decrypted_password_bytes := aems.request_decryption(aes_key_bytes, user_pwd);
	decrypted_password := convert_from(decrypted_password_bytes, 'UTF-8');

	return decrypted_password;
end;
$_$;


ALTER FUNCTION aems.get_user_password(param_username character varying) OWNER TO postgres;

--
-- TOC entry 305 (class 1255 OID 19249)
-- Name: hash_code(character varying); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION hash_code(character varying) RETURNS integer
    LANGUAGE java
    AS $$at.htlgkr.aems.util.hashcode.HashCode.getHashCode$$;


ALTER FUNCTION aems.hash_code(character varying) OWNER TO aems;

--
-- TOC entry 304 (class 1255 OID 19247)
-- Name: overwrite_user(character varying, character varying); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION overwrite_user(_username character varying, clear_text_password character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
declare
	pass_bytes bytea;
	decrypted_text varchar(4096);
	encrypted_pass_bytes bytea;
	aes_key varchar(48);
	aes_key_bytes bytea;

	datafile text default 'key.txt';

begin
	-- aquire the key from the key file ; preliminarily located within the data directory at serverside
	-- key file must be relocated in the future!!!
	aes_key := pg_read_file(datafile, 0, 16);

	pass_bytes := convert_to(clear_text_password, 'UTF-8');
	aes_key_bytes := convert_to(aes_key, 'UTF-8');
	encrypted_pass_bytes := aems.request_encryption(aes_key_bytes, pass_bytes);

	update aems."Users"
	set "password" = encrypted_pass_bytes
	where "username" = _username;

	raise notice 'updated stuff';

	return true;

exception
	when others then
		raise notice '% %', SQLERRM, SQLSTATE;
		return false;
end;
$$;


ALTER FUNCTION aems.overwrite_user(_username character varying, clear_text_password character varying) OWNER TO aems;

--
-- TOC entry 287 (class 1255 OID 16430)
-- Name: register_user(character varying, character varying); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION register_user(username character varying, clear_text_password character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
declare
	pass_bytes bytea;
	decrypted_text varchar(4096);
	encrypted_pass_bytes bytea;
	aes_key varchar(48);
	aes_key_bytes bytea;

	datafile text default 'key.txt';

	row_count_before integer;
	row_count_after integer;
begin
	-- aquire the key from the key file ; preliminarily located within the data directory at serverside
	-- key file must be relocated in the future!!!
	aes_key := pg_read_file(datafile, 0, 16);

	pass_bytes := convert_to(clear_text_password, 'UTF-8');
	aes_key_bytes := convert_to(aes_key, 'UTF-8');
	encrypted_pass_bytes := aems.request_encryption(aes_key_bytes, pass_bytes);

	select count(*) into row_count_before
	from aems."Users";

	insert into aems."Users" (id, username, "password")
	values (nextval('aems.user_seq'), username, encrypted_pass_bytes);

	select count(*) into row_count_after
	from aems."Users";

	if row_count_before < row_count_after then
		return true;
	else
		return false;
	end if;

exception
	when others then
		return false;	
end;
$$;


ALTER FUNCTION aems.register_user(username character varying, clear_text_password character varying) OWNER TO aems;

--
-- TOC entry 301 (class 1255 OID 19242)
-- Name: request_decryption(bytea, bytea); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION request_decryption(bytea, bytea) RETURNS bytea
    LANGUAGE java
    AS $$at.htlgkr.aems.util.crypto.Decrypter.requestDecryption$$;


ALTER FUNCTION aems.request_decryption(bytea, bytea) OWNER TO aems;

--
-- TOC entry 302 (class 1255 OID 19243)
-- Name: request_encryption(bytea, bytea); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION request_encryption(bytea, bytea) RETURNS bytea
    LANGUAGE java
    AS $$at.htlgkr.aems.util.crypto.Encrypter.requestEncryption$$;


ALTER FUNCTION aems.request_encryption(bytea, bytea) OWNER TO aems;

--
-- TOC entry 303 (class 1255 OID 19244)
-- Name: salt(numeric, character varying, character varying); Type: FUNCTION; Schema: aems; Owner: aems
--

CREATE FUNCTION salt(numeric, character varying, character varying) RETURNS numeric
    LANGUAGE java
    AS $$at.htlgkr.aems.util.crypto.KeyUtils.salt$$;


ALTER FUNCTION aems.salt(numeric, character varying, character varying) OWNER TO aems;

--
-- TOC entry 288 (class 1255 OID 16431)
-- Name: verify_transfer_infos(numeric); Type: FUNCTION; Schema: aems; Owner: postgres
--

CREATE FUNCTION verify_transfer_infos(combination numeric) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare

	akey decimal(400, 0);
	varchar_key varchar(500);

begin

	select aems.compute(combination, mod_number, secret_number) into akey
	from aems."TransferInfos"
	where id = 0;

	SELECT CAST(akey AS varchar(500)) into varchar_key;	
	select substr(varchar_key, 1, 16) into varchar_key;
	

	update aems."TransferInfos" -- store the key into "TransferInfos"
	set "key" = varchar_key
	where id = 0;
end;

$$;


ALTER FUNCTION aems.verify_transfer_infos(combination numeric) OWNER TO postgres;

--
-- TOC entry 185 (class 1259 OID 16432)
-- Name: anomaly_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE anomaly_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE anomaly_seq OWNER TO aems;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 186 (class 1259 OID 16434)
-- Name: Anomalies; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Anomalies" (
    id numeric(10,0) DEFAULT nextval('anomaly_seq'::regclass) NOT NULL,
    script character varying(1500),
    exec_intermediate_time numeric NOT NULL,
    last_execution timestamp without time zone DEFAULT (now())::timestamp without time zone,
    meter character varying(150) NOT NULL,
    sensor character varying(150) NOT NULL,
    script_errors character varying(500),
    CONSTRAINT check_exec_intermediate_time CHECK ((exec_intermediate_time >= (15)::numeric)),
    CONSTRAINT check_exec_intermediate_time_mod CHECK ((mod(exec_intermediate_time, (15)::numeric) = (0)::numeric))
);


ALTER TABLE "Anomalies" OWNER TO aems;

--
-- TOC entry 2467 (class 0 OID 0)
-- Dependencies: 186
-- Name: COLUMN "Anomalies".exec_intermediate_time; Type: COMMENT; Schema: aems; Owner: aems
--

COMMENT ON COLUMN "Anomalies".exec_intermediate_time IS 'Value respresented in minutes';


--
-- TOC entry 187 (class 1259 OID 16444)
-- Name: ArchivedMeterNotifications; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "ArchivedMeterNotifications" (
    id numeric(10,0) NOT NULL,
    meter character varying(150),
    notification numeric(10,0),
    positive_deviation boolean,
    negative_deviation boolean,
    positive_deviation_value numeric(7,2),
    negative_deviation_value numeric(7,2),
    period numeric(10,0),
    initial_occurrence timestamp without time zone,
    last_occurrence timestamp without time zone,
    seen boolean DEFAULT false
);


ALTER TABLE "ArchivedMeterNotifications" OWNER TO aems;

--
-- TOC entry 188 (class 1259 OID 16448)
-- Name: DebugInfo; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "DebugInfo" (
    pk integer NOT NULL,
    string character varying(1000)
);


ALTER TABLE "DebugInfo" OWNER TO aems;

--
-- TOC entry 189 (class 1259 OID 16454)
-- Name: meter_data_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE meter_data_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE meter_data_seq OWNER TO aems;

--
-- TOC entry 190 (class 1259 OID 16456)
-- Name: MeterData; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "MeterData" (
    id numeric(10,0) DEFAULT nextval('meter_data_seq'::regclass) NOT NULL,
    meter character varying(150),
    "timestamp" timestamp without time zone NOT NULL,
    measured_value numeric(7,2) NOT NULL,
    unit character varying(200)
);


ALTER TABLE "MeterData" OWNER TO aems;

--
-- TOC entry 191 (class 1259 OID 16460)
-- Name: MeterTypes; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "MeterTypes" (
    id numeric(10,0) NOT NULL,
    display_name character varying(100) NOT NULL
);


ALTER TABLE "MeterTypes" OWNER TO aems;

--
-- TOC entry 192 (class 1259 OID 16463)
-- Name: meters_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE meters_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE meters_seq OWNER TO aems;

--
-- TOC entry 193 (class 1259 OID 16465)
-- Name: Meters; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Meters" (
    id character varying(150) DEFAULT nextval('meters_seq'::regclass) NOT NULL,
    metertype numeric(10,0),
    "user" numeric(10,0),
    city character varying(50),
    latitude numeric(10,4),
    longitude numeric(10,4),
    is_sensor boolean DEFAULT false,
    name character varying(150)
);


ALTER TABLE "Meters" OWNER TO aems;

--
-- TOC entry 194 (class 1259 OID 16470)
-- Name: notices_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE notices_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE notices_seq OWNER TO aems;

--
-- TOC entry 195 (class 1259 OID 16472)
-- Name: Notices; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Notices" (
    id numeric(10,0) DEFAULT nextval('notices_seq'::regclass) NOT NULL,
    meter character varying(150) NOT NULL,
    sensor character varying(150) NOT NULL,
    notice character varying(250) NOT NULL,
    "timestamp" timestamp without time zone,
    seen boolean DEFAULT false
);


ALTER TABLE "Notices" OWNER TO aems;

--
-- TOC entry 196 (class 1259 OID 16480)
-- Name: notification_exceptions_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE notification_exceptions_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE notification_exceptions_seq OWNER TO aems;

--
-- TOC entry 197 (class 1259 OID 16482)
-- Name: NotificationExceptions; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "NotificationExceptions" (
    id numeric(10,0) DEFAULT nextval('notification_exceptions_seq'::regclass) NOT NULL,
    notification numeric(10,0) NOT NULL,
    min_positive_deviation numeric(3,0),
    min_negative_deviation numeric(3,0),
    exception_date timestamp without time zone,
    week_day numeric(1,0)
);


ALTER TABLE "NotificationExceptions" OWNER TO aems;

--
-- TOC entry 198 (class 1259 OID 16486)
-- Name: NotificationMeters; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "NotificationMeters" (
    meter character varying(150) NOT NULL,
    notification numeric(10,0) NOT NULL
);


ALTER TABLE "NotificationMeters" OWNER TO aems;

--
-- TOC entry 232 (class 1259 OID 19254)
-- Name: notification_tokens_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE notification_tokens_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE notification_tokens_seq OWNER TO aems;

--
-- TOC entry 199 (class 1259 OID 16489)
-- Name: NotificationTokens; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "NotificationTokens" (
    id numeric(10,0) DEFAULT nextval('notification_tokens_seq'::regclass) NOT NULL,
    token character varying(512),
    "user" numeric(10,0)
);


ALTER TABLE "NotificationTokens" OWNER TO aems;

--
-- TOC entry 200 (class 1259 OID 16495)
-- Name: notifications_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE notifications_seq
    START WITH 100
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE notifications_seq OWNER TO aems;

--
-- TOC entry 201 (class 1259 OID 16497)
-- Name: Notifications; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Notifications" (
    id numeric(10,0) DEFAULT nextval('notifications_seq'::regclass) NOT NULL,
    "user" numeric(10,0) NOT NULL,
    name character varying(100) NOT NULL,
    type integer,
    min_positive_deviation numeric(3,0),
    min_negative_deviation numeric(3,0)
);


ALTER TABLE "Notifications" OWNER TO aems;

--
-- TOC entry 202 (class 1259 OID 16501)
-- Name: periods_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE periods_seq
    START WITH 100
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE periods_seq OWNER TO aems;

--
-- TOC entry 203 (class 1259 OID 16503)
-- Name: Periods; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Periods" (
    id numeric(10,0) DEFAULT nextval('periods_seq'::regclass) NOT NULL,
    name character varying(1000)
);


ALTER TABLE "Periods" OWNER TO aems;

--
-- TOC entry 204 (class 1259 OID 16510)
-- Name: Registrations; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Registrations" (
    email character varying(200) NOT NULL,
    confirm_code character varying(32),
    "timestamp" timestamp without time zone
);


ALTER TABLE "Registrations" OWNER TO aems;

--
-- TOC entry 205 (class 1259 OID 16513)
-- Name: report_statistics_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE report_statistics_seq
    START WITH 100
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE report_statistics_seq OWNER TO aems;

--
-- TOC entry 206 (class 1259 OID 16515)
-- Name: ReportStatistics; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "ReportStatistics" (
    report numeric(10,0) DEFAULT nextval('report_statistics_seq'::regclass) NOT NULL,
    statistic numeric(10,0) NOT NULL
);


ALTER TABLE "ReportStatistics" OWNER TO aems;

--
-- TOC entry 207 (class 1259 OID 16519)
-- Name: reports_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE reports_seq
    START WITH 100
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reports_seq OWNER TO aems;

--
-- TOC entry 208 (class 1259 OID 16521)
-- Name: Reports; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Reports" (
    id numeric(10,0) DEFAULT nextval('reports_seq'::regclass) NOT NULL,
    name character varying(100),
    annotation character varying(2000),
    from_date date,
    to_date date,
    period numeric(10,0),
    "user" numeric(10,0)
);


ALTER TABLE "Reports" OWNER TO aems;

--
-- TOC entry 230 (class 1259 OID 19250)
-- Name: responsibilities_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE responsibilities_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE responsibilities_seq OWNER TO aems;

--
-- TOC entry 209 (class 1259 OID 16528)
-- Name: Responsibilities; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Responsibilities" (
    id numeric(10,0) DEFAULT nextval('responsibilities_seq'::regclass) NOT NULL,
    display_name character varying(200),
    "user" numeric(10,0),
    postal_code numeric(6,0),
    designation character varying(200)
);


ALTER TABLE "Responsibilities" OWNER TO aems;

--
-- TOC entry 231 (class 1259 OID 19252)
-- Name: roles_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE roles_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE roles_seq OWNER TO aems;

--
-- TOC entry 210 (class 1259 OID 16531)
-- Name: Roles; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Roles" (
    id numeric(10,0) DEFAULT nextval('roles_seq'::regclass) NOT NULL,
    display_name character varying(200)
);


ALTER TABLE "Roles" OWNER TO aems;

--
-- TOC entry 211 (class 1259 OID 16534)
-- Name: statistic_meters_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE statistic_meters_seq
    START WITH 100
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE statistic_meters_seq OWNER TO aems;

--
-- TOC entry 212 (class 1259 OID 16536)
-- Name: StatisticMeters; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "StatisticMeters" (
    statistic numeric(10,0) DEFAULT nextval('statistic_meters_seq'::regclass) NOT NULL,
    meter character varying(150) NOT NULL
);


ALTER TABLE "StatisticMeters" OWNER TO aems;

--
-- TOC entry 213 (class 1259 OID 16540)
-- Name: statistics_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE statistics_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE statistics_seq OWNER TO aems;

--
-- TOC entry 214 (class 1259 OID 16542)
-- Name: Statistics; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Statistics" (
    id numeric(10,0) DEFAULT nextval('statistics_seq'::regclass) NOT NULL,
    "user" numeric(10,0),
    name character varying(1000),
    period numeric(10,0),
    display_home boolean DEFAULT false,
    display_android boolean DEFAULT false
);


ALTER TABLE "Statistics" OWNER TO aems;

--
-- TOC entry 215 (class 1259 OID 16551)
-- Name: TransferInfos; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "TransferInfos" (
    id numeric(10,0) NOT NULL,
    secret_number numeric(3,0) NOT NULL,
    key character varying(16),
    mod_number numeric(100,0)
);


ALTER TABLE "TransferInfos" OWNER TO aems;

--
-- TOC entry 216 (class 1259 OID 16554)
-- Name: Users; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "Users" (
    id numeric(10,0) NOT NULL,
    username character varying(32) NOT NULL,
    password bytea,
    email character varying(200),
    role numeric(10,0),
    member_since timestamp without time zone,
    use_netzonline boolean,
    postal_code numeric(6,0)
);


ALTER TABLE "Users" OWNER TO aems;

--
-- TOC entry 217 (class 1259 OID 16560)
-- Name: weather_data_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE weather_data_seq
    START WITH 100
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE weather_data_seq OWNER TO aems;

--
-- TOC entry 218 (class 1259 OID 16562)
-- Name: WeatherData; Type: TABLE; Schema: aems; Owner: aems
--

CREATE TABLE "WeatherData" (
    id numeric(10,0) DEFAULT nextval('weather_data_seq'::regclass) NOT NULL,
    meter character varying(150) NOT NULL,
    "timestamp" timestamp without time zone,
    temperature numeric(5,2),
    humidity numeric(5,2)
);


ALTER TABLE "WeatherData" OWNER TO aems;

--
-- TOC entry 219 (class 1259 OID 16566)
-- Name: amn_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE amn_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 5;


ALTER TABLE amn_seq OWNER TO aems;

--
-- TOC entry 220 (class 1259 OID 16568)
-- Name: statistic_times_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE statistic_times_seq
    START WITH 100
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE statistic_times_seq OWNER TO aems;

--
-- TOC entry 221 (class 1259 OID 16570)
-- Name: user_seq; Type: SEQUENCE; Schema: aems; Owner: aems
--

CREATE SEQUENCE user_seq
    START WITH 15
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 5;


ALTER TABLE user_seq OWNER TO aems;

--
-- TOC entry 2417 (class 0 OID 16434)
-- Dependencies: 186
-- Data for Name: Anomalies; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Anomalies" (id, script, exec_intermediate_time, last_execution, meter, sensor, script_errors) FROM stdin;
25	$ccc	30	2018-02-22 00:00:00	AT00000000000000000005555	Sensor 2	\N
22	$bbb := $sensor of period from $today - 1 until $today\r\n\r\nraise notice "test" on 1 = 1 except on $monday, $tuesday	15	2018-02-22 00:00:00	AT00000000000000000005555	Sensor 2	\N
2	$y := $sensor of period from $today until $today + 1\r\n$min := $y : min\r\nraise notice "Anomaly found {$min}" on $min < 1024	15	2018-03-06 18:19:39	AT00000000000000000003333	Sensor 1	\N
\.


--
-- TOC entry 2418 (class 0 OID 16444)
-- Dependencies: 187
-- Data for Name: ArchivedMeterNotifications; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "ArchivedMeterNotifications" (id, meter, notification, positive_deviation, negative_deviation, positive_deviation_value, negative_deviation_value, period, initial_occurrence, last_occurrence, seen) FROM stdin;
1	AT00000000000000000003333	1	t	t	20.00	90.00	3	2017-10-29 12:07:13.380039	2017-10-29 12:30:00.37612	f
2	AT00000000000000000003333	1	t	t	32.25	32.25	3	2017-10-29 12:14:56.008561	2017-10-29 12:30:00.37612	f
3	AT00000000000000000003333	1	t	t	75.00	75.00	3	2017-10-29 12:17:50.582652	2017-10-29 12:30:00.37612	f
4	AT00000000000000000003333	1	t	t	20.00	180.00	3	2017-10-29 12:19:03.469842	2017-10-29 12:30:00.37612	f
5	AT00000000000000000004444	2	t	t	20.00	25.00	0	2017-10-29 12:24:59.417724	2017-10-29 12:30:00.37612	f
6	AT00000000000000000004444	2	t	f	20.00	25.00	0	2017-10-29 12:30:00.37612	\N	f
\.


--
-- TOC entry 2419 (class 0 OID 16448)
-- Dependencies: 188
-- Data for Name: DebugInfo; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "DebugInfo" (pk, string) FROM stdin;
0	2202985548564548
\.


--
-- TOC entry 2421 (class 0 OID 16456)
-- Dependencies: 190
-- Data for Name: MeterData; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "MeterData" (id, meter, "timestamp", measured_value, unit) FROM stdin;
1	AT00000000000000000003333	2017-10-15 00:00:00	20.00	\N
3	AT00000000000000000003333	2016-10-19 00:00:00	10.00	\N
2	AT00000000000000000003333	2017-10-18 00:00:00	180.00	\N
4	AT00000000000000000004444	2017-10-28 00:00:00	20.00	\N
5	AT00000000000000000005555	2017-10-28 00:00:00	25.00	\N
147	Sensor 1	2018-02-11 16:43:49	297.00	\N
148	Sensor 1	2018-02-11 16:44:17	294.00	\N
149	Sensor 1	2018-02-11 16:44:20	472.00	\N
150	Sensor 1	2018-02-11 16:44:22	448.00	\N
151	Sensor 1	2018-02-11 16:44:50	457.00	\N
152	Sensor 1	2018-02-11 16:46:10	353.00	\N
153	Sensor 1	2018-02-11 16:47:12	468.00	\N
156	Sensor 1	2018-03-06 17:58:23	393.00	\N
157	Sensor 1	2018-03-06 17:59:33	1023.00	\N
\.


--
-- TOC entry 2422 (class 0 OID 16460)
-- Dependencies: 191
-- Data for Name: MeterTypes; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "MeterTypes" (id, display_name) FROM stdin;
5	Stromzähler
6	Gaszähler
7	Wärmemengenzähler
8	Wasserzähler
\.


--
-- TOC entry 2424 (class 0 OID 16465)
-- Dependencies: 193
-- Data for Name: Meters; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Meters" (id, metertype, "user", city, latitude, longitude, is_sensor, name) FROM stdin;
AT00000000000000000003333	5	185	Grieskirchen	50.0000	60.0000	f	\N
AT00000000000000000004444	5	185	Linz	60.0000	50.0000	f	\N
AT00000000000000000005555	5	190	Ried	200.0000	30.0000	f	\N
Test	\N	\N	\N	\N	\N	f	\N
Sensor 1	\N	185	\N	\N	\N	t	Sensor 1
Sensor 2	\N	190	\N	\N	\N	t	Sensor 2
\.


--
-- TOC entry 2426 (class 0 OID 16472)
-- Dependencies: 195
-- Data for Name: Notices; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Notices" (id, meter, sensor, notice, "timestamp", seen) FROM stdin;
4	AT00000000000000000003333	Sensor 1	Anomaly found	\N	f
5	AT00000000000000000003333	Sensor 1	Anomaly found 398.42856	\N	f
6	AT00000000000000000003333	Sensor 1	Anomaly found 708.0	\N	f
7	AT00000000000000000003333	Sensor 1	Anomaly found 393.0	\N	f
\.


--
-- TOC entry 2428 (class 0 OID 16482)
-- Dependencies: 197
-- Data for Name: NotificationExceptions; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "NotificationExceptions" (id, notification, min_positive_deviation, min_negative_deviation, exception_date, week_day) FROM stdin;
1	1	5	5	\N	\N
\.


--
-- TOC entry 2429 (class 0 OID 16486)
-- Dependencies: 198
-- Data for Name: NotificationMeters; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "NotificationMeters" (meter, notification) FROM stdin;
AT00000000000000000003333	1
AT00000000000000000004444	2
\.


--
-- TOC entry 2430 (class 0 OID 16489)
-- Dependencies: 199
-- Data for Name: NotificationTokens; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "NotificationTokens" (id, token, "user") FROM stdin;
\.


--
-- TOC entry 2432 (class 0 OID 16497)
-- Dependencies: 201
-- Data for Name: Notifications; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Notifications" (id, "user", name, type, min_positive_deviation, min_negative_deviation) FROM stdin;
2	190	XXX	2	5	90
1	185	Test_Notification	2	1	1
\.


--
-- TOC entry 2434 (class 0 OID 16503)
-- Dependencies: 203
-- Data for Name: Periods; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Periods" (id, name) FROM stdin;
1	Daily
3	Monthly
2	Weekly
4	Yearly
0	General
\.


--
-- TOC entry 2435 (class 0 OID 16510)
-- Dependencies: 204
-- Data for Name: Registrations; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Registrations" (email, confirm_code, "timestamp") FROM stdin;
test@test.at	aljflasdkfasjklfjaklsfldk	2016-06-15 00:00:00
\.


--
-- TOC entry 2437 (class 0 OID 16515)
-- Dependencies: 206
-- Data for Name: ReportStatistics; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "ReportStatistics" (report, statistic) FROM stdin;
1	1
\.


--
-- TOC entry 2439 (class 0 OID 16521)
-- Dependencies: 208
-- Data for Name: Reports; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Reports" (id, name, annotation, from_date, to_date, period, "user") FROM stdin;
1	Test_Report	Test Report Annotation	2017-06-15	2017-06-16	1	185
2	XXX	YYY	2017-06-17	2017-06-18	1	190
\.


--
-- TOC entry 2440 (class 0 OID 16528)
-- Dependencies: 209
-- Data for Name: Responsibilities; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Responsibilities" (id, display_name, "user", postal_code, designation) FROM stdin;
5	\N	215	4673	Gaspoltshofen
8	\N	215	1234	HahaYes
9	\N	215	911	Illuminati
\.


--
-- TOC entry 2441 (class 0 OID 16531)
-- Dependencies: 210
-- Data for Name: Roles; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Roles" (id, display_name) FROM stdin;
1	Unverified
2	Unregistered
3	Member
4	SubAdmin
5	Admin
\.


--
-- TOC entry 2443 (class 0 OID 16536)
-- Dependencies: 212
-- Data for Name: StatisticMeters; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "StatisticMeters" (statistic, meter) FROM stdin;
1	AT00000000000000000003333
\.


--
-- TOC entry 2445 (class 0 OID 16542)
-- Dependencies: 214
-- Data for Name: Statistics; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Statistics" (id, "user", name, period, display_home, display_android) FROM stdin;
1	185	Test Statistic	\N	f	f
2	190	XXX	\N	f	f
\.


--
-- TOC entry 2446 (class 0 OID 16551)
-- Dependencies: 215
-- Data for Name: TransferInfos; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "TransferInfos" (id, secret_number, key, mod_number) FROM stdin;
0	6	7054855955358198	12666225184846600000000000000000000000000000000000000
\.


--
-- TOC entry 2447 (class 0 OID 16554)
-- Dependencies: 216
-- Data for Name: Users; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "Users" (id, username, password, email, role, member_since, use_netzonline, postal_code) FROM stdin;
215	master	\\xf21a5087d84c06d90e2aa7cb82f038d5	\N	5	\N	\N	\N
185	x	\\xf21a5087d84c06d90e2aa7cb82f038d5	\N	3	\N	\N	\N
220	xx	\\xf21a5087d84c06d90e2aa7cb82f038d5	\N	4	\N	\N	\N
190	y	\\xf21a5087d84c06d90e2aa7cb82f038d5	user_y@aems.at	3	2018-03-07 18:45:47.815	\N	\N
\.


--
-- TOC entry 2449 (class 0 OID 16562)
-- Dependencies: 218
-- Data for Name: WeatherData; Type: TABLE DATA; Schema: aems; Owner: aems
--

COPY "WeatherData" (id, meter, "timestamp", temperature, humidity) FROM stdin;
1	AT00000000000000000005555	2017-06-15 00:00:00	25.00	56.00
2	AT00000000000000000004444	\N	12.00	\N
19	AT00000000000000000003333	\N	15.02	\N
\.


--
-- TOC entry 2471 (class 0 OID 0)
-- Dependencies: 219
-- Name: amn_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('amn_seq', 10, true);


--
-- TOC entry 2472 (class 0 OID 0)
-- Dependencies: 185
-- Name: anomaly_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('anomaly_seq', 26, true);


--
-- TOC entry 2473 (class 0 OID 0)
-- Dependencies: 189
-- Name: meter_data_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('meter_data_seq', 157, true);


--
-- TOC entry 2474 (class 0 OID 0)
-- Dependencies: 192
-- Name: meters_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('meters_seq', 1, false);


--
-- TOC entry 2475 (class 0 OID 0)
-- Dependencies: 194
-- Name: notices_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('notices_seq', 7, true);


--
-- TOC entry 2476 (class 0 OID 0)
-- Dependencies: 196
-- Name: notification_exceptions_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('notification_exceptions_seq', 100, true);


--
-- TOC entry 2477 (class 0 OID 0)
-- Dependencies: 232
-- Name: notification_tokens_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('notification_tokens_seq', 1, false);


--
-- TOC entry 2478 (class 0 OID 0)
-- Dependencies: 200
-- Name: notifications_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('notifications_seq', 100, false);


--
-- TOC entry 2479 (class 0 OID 0)
-- Dependencies: 202
-- Name: periods_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('periods_seq', 100, false);


--
-- TOC entry 2480 (class 0 OID 0)
-- Dependencies: 205
-- Name: report_statistics_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('report_statistics_seq', 100, false);


--
-- TOC entry 2481 (class 0 OID 0)
-- Dependencies: 207
-- Name: reports_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('reports_seq', 100, false);


--
-- TOC entry 2482 (class 0 OID 0)
-- Dependencies: 230
-- Name: responsibilities_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('responsibilities_seq', 9, true);


--
-- TOC entry 2483 (class 0 OID 0)
-- Dependencies: 231
-- Name: roles_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('roles_seq', 1, false);


--
-- TOC entry 2484 (class 0 OID 0)
-- Dependencies: 211
-- Name: statistic_meters_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('statistic_meters_seq', 100, false);


--
-- TOC entry 2485 (class 0 OID 0)
-- Dependencies: 220
-- Name: statistic_times_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('statistic_times_seq', 100, false);


--
-- TOC entry 2486 (class 0 OID 0)
-- Dependencies: 213
-- Name: statistics_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('statistics_seq', 100, true);


--
-- TOC entry 2487 (class 0 OID 0)
-- Dependencies: 221
-- Name: user_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('user_seq', 224, true);


--
-- TOC entry 2488 (class 0 OID 0)
-- Dependencies: 217
-- Name: weather_data_seq; Type: SEQUENCE SET; Schema: aems; Owner: aems
--

SELECT pg_catalog.setval('weather_data_seq', 100, false);


SET search_path = sqlj, pg_catalog;

--
-- TOC entry 2202 (class 0 OID 19169)
-- Dependencies: 223
-- Data for Name: jar_repository; Type: TABLE DATA; Schema: sqlj; Owner: postgres
--

COPY jar_repository  FROM stdin;
